import java.util.ArrayList;

public class MasterBoard extends miniBoard { // extending masterboard from miniBoard

    public static void printMasterBoard(ArrayList<miniBoard> boards) { // function to print the Master Board
        StringBuilder board = new StringBuilder();

        board.append("\n");
        board.append("-".repeat(48));
        board.append("\n");

        for (int rows = 0; rows < 9; rows++) {
            for (int col = 0; col < 9; col++) {
                char box = boards.get(((rows / 3) * 3) + ( col / 3)).getPlayerIn(rows % 3 * 3 + col % 3);
                if ((col % 3) % 3 == 0) {
                    board.append(col == 0 ? "|| " : " | ").append(box).append(" |");

                } else if ((col % 3) % 3 == 2) {
                    board.append("| ").append(box).append(col == 8 ? " ||" : " |");
                } else {
                    board.append("| ").append(box).append(" |");
                }
            }
            board.append("\n");
            board.append("-".repeat(48));
            board.append("\n");
        }
        System.out.println(board);
    }

    private static ArrayList<Integer> chooseBoards(ArrayList<miniBoard> boards) { // method to choose boards
        ArrayList<Integer> possibleBoards = new ArrayList<>(); // create an arraylist
        for (int i = 0; i < boards.size(); i++) // for loop to go through each board
            if (!boards.get(i).isFull()) // if the board is not full
                possibleBoards.add(i); // then add it to the array list
        return possibleBoards;
    }

    protected static boolean isBoardsFilled(ArrayList<miniBoard> boards) { // method to test if all the boards are filled
        boolean isFilled = true;
        for (miniBoard b : boards) // go through each mini board
            isFilled = isFilled && b.isFull(); // check if each one is full
        return isFilled;
    }


    public static void printBoardChoice(boolean firstBoard, int curBoard, ArrayList<miniBoard> boards) { // method to print the different board choices

        if (firstBoard) { // this is the frist board
            System.out.println("ONLY BOARD:  " + curBoard); // this is the only board to chose from
        } else {
            ArrayList<Integer> possibleBoards = chooseBoards(boards); // create arraylist and set equal to chooseBoards return
            System.out.print("Choose between these boards: " + possibleBoards + "\n"); // print the available boards
        }
    }

    public static void printGameWinners(ArrayList<miniBoard> boards) { // method to print the winner of each miniboard
        StringBuilder winner = new StringBuilder(); // create winner stringbuilder object *String builder for easy appending*
        for (int i = 0; i < boards.size(); i++) // for loop to go through the each board
        {
            // add the board number if its won
            if (boards.get(i).isWon())
                winner.append(new StringBuilder().append("Board # ").append(i + 1).append(" winner is ").append(Player.PLAYER[boards.get(i).getWinner()]).append("\n").toString()); // print the board number with the winner
            else {
                winner.append("");
            }
        }
        System.out.println(winner);
    }
}
